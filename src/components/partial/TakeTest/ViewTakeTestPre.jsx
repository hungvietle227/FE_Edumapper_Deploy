import styles from "./Test.module.css";
import { Typography, Button, Grid, Divider, Card, Box } from "@mui/material";
import { Create, MenuBook, Mic } from "@mui/icons-material";
import { useNavigate, useParams } from "react-router-dom";
import HeadphonesIcon from "@mui/icons-material/Headphones";
import { toast } from "react-toastify";
import useAuth from "../../../hooks/useAuth";
import Messages from "../../../utils/Message";
import ScheduleSpeaking from "./ScheduleSpeaking";
import { useState } from "react";
import { GetSpeakingTest, StartTest } from "../../../api/TestManageApi";
import { UserRequestSpeaking } from "../../../api/ExamApi";
import StatusCode from "../../../utils/StautsCode";

export default function ViewTakeTestPre() {
  let { testId } = useParams();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [openAddSchedule, setOpenAddSchedule] = useState(false);

  const handleOpenAddSchedule = () => setOpenAddSchedule(true);

  const handleCloseAddSchedule = () => setOpenAddSchedule(false);

  const handleAddSchedule = async (newSchedule) => {
    try {
      const exam = await GetSpeakingTest(testId); // L·∫•y examId t·ª´ testId
      console.log(exam?.metaData[0]?.exams[0]?.examId);
      if (!exam) {
        toast.error("Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c examId");
        return;
      }
      const examId = exam?.metaData[0]?.exams[0]?.examId;

      const scheduleData = {
        ...newSchedule,
        examId,
      };

      const startTest = {
        examId: examId,
        userId: user.id
      }
      const response = await UserRequestSpeaking(scheduleData)
      await StartTest(startTest)
      const responseJson = await response.json();
      if (responseJson.statusCode == StatusCode.CREATED){
        toast.success('ƒê·∫∑t l·ªãch ƒë·∫øn gi√°o vi√™n th√†nh c√¥ng')
      }else{
        toast.error(Messages.ERROR.BAD_REQUEST);
      }
    } catch (error) {
      toast.error("L·ªãch ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t t·ª´ tr∆∞·ªõc r·ªìi");
      console.error("Error adding schedule:", error);
    }
  };
  

  return (
    <div className={styles.container}>
      {/* Top Section with Image and Text */}
      <Grid
        container
        spacing={2}
        alignItems="center"
        justifyContent="center"
        className={styles.topSection}
      >
        <Grid item xs={12} md={3}>
          <img
            src="/img/test-pre.png" // Update the image path
            alt="Illustration"
            className={styles.topImage}
          />
        </Grid>
        <Grid item xs={12} md={7}>
          <Typography variant="h4" mb={2} className={styles.premiumTitle}>
            Premium Test
          </Typography>
          <Typography variant="body1" className={styles.premiumDescription}>
            Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ph·∫ßn Thi Premium ! ƒê√¢y l√† n∆°i b·∫°n c√≥ th·ªÉ ki·ªÉm
            tra ki·∫øn th·ª©c c·ªßa m√¨nh m·ªôt c√°ch th√∫ v·ªã v√† hi·ªáu qu·∫£. V·ªõi c√°c b√†i thi
            ƒë∆∞·ª£c thi·∫øt k·∫ø chuy√™n nghi·ªáp, b·∫°n s·∫Ω c√≥ c∆° h·ªôi tr·∫£i nghi·ªám c·∫£m gi√°c
            nh∆∞ trong m·ªôt k·ª≥ thi th·∫≠t s·ª±. Ch√∫ng t√¥i cung c·∫•p nhi·ªÅu ch·ªß ƒë·ªÅ kh√°c
            nhau, t·ª´ ng·ªØ ph√°p, t·ª´ v·ª±ng ƒë·∫øn c√°c k·ªπ nƒÉng nghe, n√≥i, ƒë·ªçc, vi·∫øt.
            ƒê·ª´ng lo l·∫Øng n·∫øu b·∫°n ch∆∞a ho√†n h·∫£o, v√¨ ƒë√¢y l√† m·ªôt c∆° h·ªôi tuy·ªát v·ªùi
            ƒë·ªÉ h·ªçc h·ªèi v√† c·∫£i thi·ªán b·∫£n th√¢n!
          </Typography>
        </Grid>
      </Grid>
      <Divider />
      {/* Testing Section */}
      <Typography mt={4} mb={2} variant="h5" className={styles.testingTitle}>
        TESTING
      </Typography>
      <Box className={styles.root}>
        <Grid container spacing={2} justifyContent="center">
          {/* Listening */}
          <Grid item xs={6} sm={3}>
            <Card className={styles.testCard}>
              <HeadphonesIcon className={styles.icon} />
              <Typography variant="h6" mb={4}>
                Listening
              </Typography>
              <Button
                variant="contained"
                style={{ background: "#73fbfd" }}
                className={styles.testButton}
                onClick={() => navigate(`/listening-test/${testId}`)}
              >
                Take Test
              </Button>
            </Card>
          </Grid>

          {/* Reading */}
          <Grid item xs={6} sm={3}>
            <Card className={styles.testCard}>
              <MenuBook className={styles.icon2} />
              <Typography variant="h6" mb={4}>
                Reading
              </Typography>
              <Button
                variant="contained"
                color="secondary"
                style={{ background: "#73fd91" }}
                className={styles.testButton}
                onClick={() => navigate(`/reading-test/${testId}`)}
              >
                Take Test
              </Button>
            </Card>
          </Grid>

          {/* Writing */}
          <Grid item xs={6} sm={3}>
            <Card className={styles.testCard}>
              <Create className={styles.icon3} />
              <Typography variant="h6" mb={4}>
                Writing
              </Typography>
              {user?.currentMembership == "Premium Plus Package" && (
                <Button
                  variant="contained"
                  color="secondary"
                  style={{ background: "#f29d38" }}
                  className={styles.testButton}
                  onClick={() => navigate(`/writing-test/${testId}`)}
                >
                  Take Test
                </Button>
              )}
              {user?.currentMembership == "Premium Package" && (
                <Button
                  variant="contained"
                  disabled
                  className={styles.testButton}
                  style={{ fontWeight: "bold" }}
                >
                  üëë Premium Plus Test
                </Button>
              )}
            </Card>
          </Grid>

          {/* Speaking */}
          <Grid item xs={6} sm={3}>
            <Card className={styles.testCard}>
              <Mic className={styles.icon4} />
              <Typography variant="h6" mb={4}>
                Speaking
              </Typography>
              {user?.currentMembership == "Premium Plus Package" && (
                <Button
                  variant="contained"
                  color="secondary"
                  style={{ background: "#ea3ef7" }}
                  className={styles.testButton}
                  onClick={() => handleOpenAddSchedule()}
                >
                  Take Test
                </Button>
              )}
              {user?.currentMembership == "Premium Package" && (
                <Button
                  variant="contained"
                  disabled
                  className={styles.testButton}
                  style={{ fontWeight: "bold" }}
                >
                  üëë Premium Plus Test
                </Button>
              )}
            </Card>
          </Grid>
        </Grid>
      </Box>

      {user?.currentMembership != "Premium Plus Package" && (
        <Box className={styles.eduMapperSection}>
          <Typography variant="h6" className={styles.eduMapperTitle}>
            Tr·∫£i nghi·ªám tr·ªçn v·∫πn c√°c ƒë·∫∑c quy·ªÅn t·ª´{" "}
            <span className={styles.eduMapperBrand}>EduMapper</span>
          </Typography>
          <Typography variant="body2" color="textSecondary">
            Tr·ªçn b·ªô 4 k·ªπ nƒÉng
          </Typography>
          <Box className={styles.upgradeImageContainer}>
            <img
              src="/img/Img-Ad.png"
              alt="IELTS"
              className={styles.upgradeImage}
            />
          </Box>
          <Button
            variant="contained"
            color="success"
            className={styles.upgradeButton}
            onClick={() => navigate("/package")}
          >
            N√¢ng c·∫•p l√™n Premium Plus
          </Button>
        </Box>
      )}
      {user?.currentMembership == "Premium Plus Package" && (
        <Box className={styles.eduMapperSection}>
          <Typography variant="h6" className={styles.eduMapperTitle}>
            Full ƒë·∫∑c quy·ªÅn{" "}
            <span className={styles.eduMapperBrand}>EduMapper</span>
          </Typography>
          <Typography
            variant="body2"
            color="textSecondary"
            mt={1}
            fontWeight={600}
          >
            Tr·ªçn b·ªô 4 k·ªπ nƒÉng
          </Typography>
          <Box className={styles.upgradeImageContainer}>
            <img
              src="https://tailieutoeic.com/wp-content/uploads/2020/08/unnamed.png"
              alt="IELTS"
              className={styles.upgradeImage}
            />
          </Box>
        </Box>
      )}
      <ScheduleSpeaking
        open={openAddSchedule}
        onClose={handleCloseAddSchedule}
        onAdd={handleAddSchedule}
      />
    </div>
  );
}
